" MY NOTES/TIPS/CHEATS
"
"   gn - operate on next search match. e.g. `cgn` changes next search match.
"        then `.` can be used to repeat the change (or `n`/`N` to navigate
"        around w/o repeating the change). w/o operator pending (i.e. `gn`
"        alone), just visually select next search match.
"   g* - like *, but don't put "\<" and "\>" around the word
"   g; - go to [count] older position in change list
"   g, - go to [count] newer position in change list
"   gp - paste and leave cursor at end
"   C-a - increment the first number found on current line after cursor
"   @: - repeat command (just like @x runs `x` macro)
"   @@ - repeat last macro you ran
"   q/ - open search history! Enter to select item
"   q: - open command history! Enter to select item
"
" MARKS (move to with quote or backtick: '{mark} -- linewise
"                                        `{mark} -- characterwise exclusive)
"
"   ' - position before latest jump (eg, gg=G'' formats entire file
"       and returns cursor to where it started)
"   [ / ] - beginning / end of last YANK or PASTE
"   < / > - beginning / end of last VISUAL SELECTION
"
"   Using vim-fugitive for resolving merge conflicts:
"   http://vimcasts.org/episodes/fugitive-vim-resolving-merge-conflicts-with-vimdiff/
"   tl;dr:
"     :Gdiff -- open 3-way diff
"     cursor to the branch you want to choose for your working copy, then :dp
"       (effectively `:diffput <working-copy-buffer> | diffup[date]`)
"     ]c -- cursor to next conflict
"   what if you don't want to just take one or the other?  i guess just edit
"   the working copy manually and then `:diffup`
"   when you're done, cursor to working copy and `:Gwrite` -- writes the
"   current file to the index (e.g. like `git add`)

"dein Scripts-----------------------------
if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath+=~/.vim/bundles/repos/github.com/Shougo/dein.vim

" Required:
if dein#load_state('~/.vim/bundles')
  call dein#begin('~/.vim/bundles')

  " Let dein manage dein
  " Required:
  call dein#add('~/.vim/bundles/repos/github.com/Shougo/dein.vim')

  call dein#add('kien/ctrlp.vim')
  call dein#add('scrooloose/nerdtree')
  call dein#add('tomtom/tcomment_vim') " (un)commenting with gc{motion} (but mapped to <Leader>c{motion} instead)
  call dein#add('ntpeters/vim-better-whitespace') " trailing whitespace highlighting, :StripWhitespace to clean file
  call dein#add('terryma/vim-expand-region') " v/<C-v> to expand/contract selection
  call dein#add('rking/ag.vim') " better grepping! use :Ag
  call dein#add('bling/vim-airline') " cool status line
  call dein#add('vim-syntastic/syntastic') " syntax checking
  call dein#add('tpope/vim-eunuch') " provides :SudoW[rite] (and some other stuff)
  call dein#add('tpope/vim-fugitive') " provides :Gblame and friends
  call dein#add('yssl/QFEnter') " open quickfix file in previously focused window
  call dein#add('tpope/vim-endwise') " auto-insert `end` in ruby and other langs
  call dein#add('tpope/vim-surround') " smart edits for things that 'surround' like parens and HTML tags
  call dein#add('tpope/vim-repeat') " allow `.` repeating of vim-surround commands
  call dein#add('neoclide/coc.nvim', { 'rev': 'release' }) " autocompletion/full-on language server support

  " Languages
  call dein#add('vim-ruby/vim-ruby')
  call dein#add('kana/vim-textobj-user') " dependency of vim-textobj-rubyblock
  call dein#add('nelstrom/vim-textobj-rubyblock')
  call dein#add('pangloss/vim-javascript')
  call dein#add('elzr/vim-json')
  call dein#add('leafgarland/typescript-vim')
  call dein#add('nono/vim-handlebars')
  call dein#add('kchmck/vim-coffee-script')
  call dein#add('mxw/vim-jsx')
  call dein#add('fatih/vim-go')
  call dein#add('elixir-lang/vim-elixir')
  call dein#add('hashivim/vim-terraform')
  call dein#add('google/vim-jsonnet')

  call dein#add('altercation/vim-colors-solarized.git')
  call dein#add('vim-airline/vim-airline-themes')

  " Required:
  call dein#end()
  call dein#save_state()
endif

" Required: (this loads indent files, to automatically do
" language-dependent indenting)
filetype plugin indent on
syntax enable

" If you want to install not installed plugins on startup.
if dein#check_install()
  call dein#install()
endif

"End dein Scripts-------------------------

" install CoC extensions
let g:coc_global_extensions = [ 'coc-prettier', 'coc-json', 'coc-tsserver' ]

" CoC 'code actions' like fixing missing references by importing libs
nmap <leader>ac <Plug>(coc-codeaction)

" fzf installed via homebrew, loaded here:
set rtp+=/usr/local/opt/fzf
" hack to get it working with MacVim. works, but slow and annoying.
let g:fzf_launcher = "in_a_new_term_function %s"

" Space Leader!
let mapleader = "\<Space>"
let maplocalleader = "\<Space>"


" ## Display

" don't break words in middle
set linebreak
" show incomplete paragraphs even when they don't fit on screen (avoid @'s)
set display+=lastline
" always show ruler
set ruler
" turn on syntax hilighting
syntax on
" show line numbers
set number
" allow buffers to be open in the background
set hidden
" keep 5 lines of context on the screen while scrolling, instead of scrolling when cursor is at very bottom
set scrolloff=5
" ...except for in the quickfix window (this is a hassle :/ )
" get rid of scrolloff option for certain buffers like the quickfix and preview windows
autocmd BufEnter *
      \ if (&ft=='qf' || &previewwindow || bufname('%') ==# "__Tag_List__") && !exists('s:scrolloff_sav') |
      \   let s:scrolloff_sav=&scrolloff |
      \   set scrolloff=0 |
      \ endif
" File type will not be set on the first BufEnter
autocmd Filetype qf
      \ if !exists('s:scrolloff_sav') |
      \   let s:scrolloff_sav=&scrolloff |
      \   set scrolloff=0 |
      \ endif
autocmd BufLeave *
      \ if (&ft=='qf' || &previewwindow || bufname('%') ==# "__Tag_List__") && exists('s:scrolloff_sav') |
      \   let &scrolloff=s:scrolloff_sav |
      \   unlet s:scrolloff_sav |
      \ endif
" always show status line (so we see our sweet vim-airline even with only a single split open)
set laststatus=2
" show filename in terminal titlebar
set title
set titlestring=vim\ -\ %f
" Hide scrollbars in gui vims
set guioptions-=L
set guioptions-=R
set guioptions-=l
set guioptions-=r


" ## Theme

set background=dark
let g:airline_theme='base16'
" if !has("gui_running")
"   let g:solarized_termtrans=1
"   let g:solarized_termcolors=256
" endif
colorscheme solarized


" ## Indentation and Tabs

" two spaces pleases
set ts=2
set shiftwidth=2
" and no tab characters!
set expandtab
" round to nearest 2, don't just move 2
set shiftround

" `smartindent` is an obsolete option for C-like syntax. It has been replaced with `cindent`,
" and setting `cindent` also overrides `smartindent`. Vim has indentation
" support for many languages out-of-the-box, and setting `smartindent`
" (or `cindent`, for that matter) in your .vimrc might interfere with this. Use `filetype indent on` and be happy.
set noautoindent
set nosmartindent
filetype plugin indent on


" ## Code Folding

" turn off folding by default
set nofoldenable
" fold by indentation level
set foldmethod=indent
" start out with folds for all but really deep nesting expanded
set foldlevel=9


" ## Spell Checking

" turn it on by default for certain files
" files with extension .es.txt automatically spellchecked in Spanish
au BufNewFile,BufRead *.en.txt set spell
au BufNewFile,BufRead *.es.txt set spelllang=es_es


" ## Backup / Swap file storage

" pull everything together in one place; don't write swap files in cwd
" the trailing `//` causes swap file names to be built from their full path
set backupdir=~/.vim/.swapfiles//
set directory=~/.vim/.swapfiles//


" ## Nitpicks

" eliminate delay after <Esc> from Visual mode (i don't _think_ there are any side effects...?)
set ttimeoutlen=0


" ## Keybindings

nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>

" make Y work like D, C, etc.
nnoremap Y y$

" make up, down, j, k keys work intuitively for long paragraphs
nmap <up> gk
nmap <down> gj
nmap j gj
nmap k gk
vmap <up> gk
vmap <down> gj
vmap j gj
vmap k gk

" not in insert mode -- <C-o> can't keep up with my fast key repeat :(
" imap <up> <C-o>gk
" imap <down> <C-o>gj

" CTRL-U in insert mode deletes the current line (does not scroll up a page,
" as it does in normal mode). `CTRL-G u` first will break undo sequence and
" make that line deletion a separate change that can be undone on its own.
inoremap <C-U> <C-G>u<C-U>

" complete in command mode with tab
cnoremap <Tab> <C-L><C-D>

" Tab does autocompletion in insert mode
inoremap <Tab> <C-n>

nnoremap <Leader>n :NERDTreeToggle<CR> :NERDTreeMirror<CR>
nnoremap <Leader>N :NERDTreeFind<CR> :NERDTreeMirror<CR>

" [b and ]b for prev/next buffer
nnoremap <silent> [b :bp<CR>
nnoremap <silent> ]b :bn<CR>

" :BD to destroy the buffer but keep the split open (w/ previous buffer in it)
command BD bp\|bd \#

" after indenting in visual mode, retain selection
vnoremap > >gv
vnoremap < <gv

" when pasting in visual mode, don't overwrite the default register
vnoremap p pgvygv<Esc>

" in visual mode, * searches for the selected text
vnoremap * "zy/<C-r>z<CR>

" vim-expand-region maps to v/<C-v>
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)


" ## Searching

" Highligh found search results, can be turned off with `:noh`
set hlsearch

" This will have searches ignore case unless I use a capital letter
set ignorecase
set smartcase

" Start searching right away instead of waiting for `<CR>`
set incsearch

" fix backspace in insert mode
set backspace=indent,eol,start

"map <silent> <LocalLeader>nh :nohls<CR>
"map <silent> <LocalLeader>rt :!ctags -R --exclude=".git\|.svn\|log\|tmp\|db\|pkg" --extra=+f<CR>


" EASIER SPLIT NAVIGATIONS
" We can use different key mappings for easy navigation between splits to save
" a keystroke. So instead of ctrl-w then j, itâ€™s just ctrl-j:
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" MORE NATURAL SPLIT OPENING
" Open new split panes to right and bottom, which feels more natural than
" Vimâ€™s default:
set splitbelow
set splitright

" CtrlP mappings
nnoremap <Leader>o :CtrlP<CR>
nnoremap <Leader>b :CtrlPBuffer<CR>
nnoremap <Leader>m :CtrlPMRUFiles<CR>
nnoremap <Leader>O :CtrlPMixed<CR>

" Copy & paste to system clipboard with <Space>y and <Space>p
nnoremap <Leader>y "+y
nnoremap <Leader>Y "+y$
nnoremap <Leader>d "+d
nnoremap <Leader>p "+p
nnoremap <Leader>P "+P
vnoremap <Leader>y "+y
vnoremap <Leader>d "+d
vnoremap <Leader>p "+p
vnoremap <Leader>P "+P

" share links with coworkers
command Blit ! echo https://gerrit.instructure.com/plugins/gitiles/$(basename `git rev-parse --show-toplevel`)/+/$(git log -1 --pretty=format:\%H origin/master)/% | pbcopy


" enter reruns last test...
"nmap <CR> :wa<CR> :VimuxRunLastCommand<CR>

" ...but does normal thing in quickfix window
"autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR>

" grep for word/WORD under cursor with leader-g/G
" nnoremap <Leader>g :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" nnoremap <Leader>G :grep! "\b<C-R><C-A>\b"<CR>:cw<CR>
nnoremap <Leader>g :Ag! -wQ "<cword>"<CR>
nnoremap <Leader>G :Ag! -wQ "<cWORD>"<CR>
vnoremap <Leader>g "zy:Ag! -Q "<C-R>z"<CR>


" <F3> to switch between mouse modes
fun! s:ToggleMouse()
  if &mouse == ""
    set mouse=a
    set number
    echo "Mouse is for Vim (" . &mouse . ")"
  else
    set mouse=""
    set nonumber " we always go to terminal for copying, so save ourselves a step
    echo "Mouse is for terminal"
  endif
endfunction
map <F3> :call <SID>ToggleMouse()<CR>
imap <F3> <C-O><F3>

" also set it to vim mode by default
set mouse=a

" TODO: get used to using system clipboard copy/paste instead of mouse
" stuff... also, maybe a mapping for paste-without-formatting, rather than
" doing pastetoggle all the time

" toggle paste, and always report its status
map <F4> :set paste!<CR>:set paste?<CR>
set pastetoggle=<F4>

set history=500 " keep 500 lines of command line history

set formatoptions+=j " Delete comment character when joining commented lines

" ddorman's custom :Ag -- paulh uses a package. might check it out...
" command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!

" unhighlight search hits
nmap <silent> \n :nohlsearch<CR>

" next/previous buffer
nmap <C-n> :bnext<CR>
nmap <C-p> :bprev<CR>

" This gets used by plugins like ctrlp, ag, and nerdtree
" TODO: maybe i should be using wildignore for this stuff?
let g:ignore_dirs='node_modules'

" little experiment. if the pwd when you open vim has a .vim-ignore-dirs in
" it, then add that to our global ignore_dirs
if filereadable('.vim-ignore-dirs')
  let g:ignore_dirs.=' '.join(readfile('.vim-ignore-dirs'), ' ')
endif

" when switching buffers/splits, check to see if the buffer has been
" modified by another process. like what gvim does when it receives
" focus. 'silent!' ignores errors so that windows for which checktime
" doesn't work -- e.g. the Command Line (q:) -- don't complain
autocmd BufWinEnter,WinEnter * silent! checktime

" After whitespace, insert the directory of the current file
" e.g. typing `:echo <C-P>` will expand into something like ':echo /Users/mziwisky'
cnoremap <expr> <C-P> getcmdline()[getcmdpos()-2] ==# ' ' ? expand('%:p:h') : "\<C-P>"

