# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt appendhistory
setopt hist_find_no_dups
bindkey -v
# End of lines configured by zsh-newuser-install

# stupid oh-my-zsh wants to fuck with pushd...
unsetopt pushdminus
unsetopt pushdignoredups
unsetopt autopushd

# also, keep histories separate
unsetopt sharehistory

#bindkey "^[[A" history-search-backward
#bindkey "^[[B" history-search-forward
# something changed, and the above were no longer correct keycodes
# for the up and down arrow. i think the following will work for
# any terminal that implements terminfo.
bindkey $terminfo[kcuu1] history-search-backward
bindkey $terminfo[kcud1] history-search-forward

# reverse intelligent search -- super handy!
bindkey "^R" history-incremental-search-backward

export EDITOR=vim
# doesn't seem like it should be necessary to manually set SHELL, but on a new
# machine `aws-creds shell` was using bash instead of zsh, so setting this was
# a quick fix
export SHELL=$(which zsh)

alias ls='ls -G'
alias l='ls -Fa'
alias ll='ls -la'
alias lll='ls -alotr' # sort by mod time, most recent last
alias llll='ls -aloSrh' # sort by size, largest last
alias cp='cp -v -i'
alias rm='rm -i'
alias mv='mv -v -i'
alias vdiff=opendiff
alias grep='grep --color=auto'
alias ngrok-host='ngrok http -host-header=rewrite'
alias dc='docker-compose'
alias dcr='docker-compose run --rm'

# purge old docker images (interactively)
function docker-gc()
{
  docker images -f "dangling=true"
  read -k 1 "yn?You cool deleting all those? [y/n] "
  echo ""
  case $yn in
    [Nn]* ) return;;
  esac
  docker images -f "dangling=true" -q | while read ID; do docker rmi $ID; done;
}

# "search no svn" - look for an expression in all files
# under dir (current if unspecified), but skip .svn directories
function sns()
{
  function doit()
  {
    grep -r --exclude-dir=.svn --exclude-dir=.git "$2" $1
  }

  if [ $# = 1 ]; then
    doit . $1
  elif [ $# = 2 ]; then
    doit $1 $2
  else
    echo 'usage: sns [dir] expression'
  fi
}

function mkcd()
{
  mkdir -p $1 && cd $1
}

export PATH=~/scripts:$PATH

# Host-specific configs
case $(hostname -s) in
  "c02y1135jgh6")
    ;&
  "mziwisky-l2")
    ;& # this is the syntax for bash case-statement fallthrough
  "mziwisky-l") # formerly "shinestructure"
    if [ -e /usr/local/share/chruby/chruby.sh ]; then
      source /usr/local/share/chruby/chruby.sh
      source /usr/local/share/chruby/auto.sh
    fi
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" --no-use # This loads nvm,
    # but without support for .nvmrc files, i.e. it doesn't automatically call
    # `nvm use` when you `cd`. auto-use may be convenient for heavy node usage,
    # but it makes zsh shells take 1+ seconds to load, which drives me crazy.
    type pyenv > /dev/null && eval "$(pyenv init -)" # this slows shell load a
    # little too, but i'm tolerating it for now
    export PGHOST=localhost
    export PGDATA=/usr/local/var/postgres
    export VAULT_ADDR=https://vault.insops.net
    # NOTE: I don't think the below alias is needed -- if you want to start
    # the postgres server, probably just use `pg_ctl start` instead
    alias pgstart='postgres -D $PGDATA -r $PGDATA/server.log'
    alias mongostart='mongod --config /usr/local/etc/mongod.conf &>/dev/null &'
    alias retina='open ~/scripts/retina.app'
    alias bx='bundle exec'
    alias nx='PATH=$(npm bin):$PATH'
    alias reds='redis-server /usr/local/etc/redis.conf'
    alias pyserv='python -m SimpleHTTPServer'
    alias asc='java -jar /Applications/Adobe\ Flash\ Builder\ 4.7/sdks/4.9.1AIR3.9/lib/asc.jar'
    alias asc2='java -jar /Applications/Adobe\ Flash\ Builder\ 4.7/eclipse/plugins/com.adobe.flash.compiler_4.7.0.349722/AIRSDK.3.9/lib/compiler.jar'
    alias canvacurl='curl -H "Authorization: Bearer MnIaYWIotCBXRFhoXTNnFJl46q2qpzr9KdUwgMuLb8hCmMDPCBSC0r9BGoph0CXp"'
    alias underscor="jq '.'"
    alias galleryreset='pushd ~/repos/gallery && bx rake assets:clobber && rm -rf node_modules && rm -rf bower_components && npm install && bower install && popd'
    alias getsmartdbreset='dropdb get_smart_test && createdb get_smart_test && RAILS_ENV=test bin/rails runner "ActiveRecord::Base.connection.execute(\"CREATE SCHEMA hstore; CREATE EXTENSION HSTORE SCHEMA hstore\")" && RAILS_ENV=test bx rake db:migrate'
    alias instdokku='ssh dokku@internal.instructure.com'
    alias rr='rapture refresh'
    alias ra='rapture assume'
    alias tf='terraform'
    ;;
  *)
    echo "WARNING: host $(hostname -s) not familiar to .zshrc"
esac

if [ -n "$ZSH_THEME" ]; then
  # oh-my-zsh is probably being used
else
  # probably no oh-my-zsh, so set your PS1
  PS1="%F{green}[%n@%m %F{red}%1~%F{green}]%(#.#.$)%f "
  echo "You should probably get oh-my-zsh, n00b."
fi

# # grr... canvas' `bx rake js:compile` needs to be able to open a zillion files at once
# ulimit -n 4096

# dinghy/docker compels me!
export DOCKER_HOST=tcp://192.168.99.100:2376
export DOCKER_CERT_PATH=/Users/mziwisky/.docker/machine/machines/dinghy
export DOCKER_TLS_VERIFY=1
export DOCKER_MACHINE_NAME=dinghy

export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin

# ftl-engine output is unreadable with solarized, so i made a theme. use it
# when we enter a vaulted shell with SWF_DOMAIN set.
[ -z "$SWF_DOMAIN" ] || echo -e "\033]50;SetProfile=Default but with readable ftl-engine output\a"

# export PATH="/usr/local/opt/scala@2.11/bin:$PATH"
# export JAVA_HOME=$(/usr/libexec/java_home --version 1.8)
# export SBT_OPTS="-Xmx2G -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=2G -Xss2M"

eval "$( command rapture shell-init )"
export CHOPS_REGIONS=us-east-1,us-west-2,eu-west-1,eu-central-1,ca-central-1,ap-southeast-1,ap-southeast-2
