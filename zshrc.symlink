export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

ZSH_CUSTOM=~/.oh-my-zsh-custom
ZSH_THEME="mziwisky"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# show timestamps in `history` output
HIST_STAMPS="yyyy-mm-dd"

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
# plugins=(git)

# see: https://docs.brew.sh/Shell-Completion#configuring-completions-in-zsh
if type brew &>/dev/null; then
  FPATH=$(brew --prefix)/share/zsh/site-functions:$FPATH

  autoload -Uz compinit
  compinit
fi

source $ZSH/oh-my-zsh.sh

# All the above is oh-my-zsh stuff, comes from the OMZ zshrc template.
# Now on to the stuff that's (mostly) OMZ-agnostic.

# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt appendhistory
setopt hist_find_no_dups
bindkey -v
# End of lines configured by zsh-newuser-install

# stupid oh-my-zsh wants to fuck with pushd...
unsetopt pushdminus
unsetopt pushdignoredups
unsetopt autopushd

# also, keep histories separate
unsetopt sharehistory

# all this nonsense makes it so that when you type something and then press the
# up and down arrow keys, you cycle through your history of commands that start
# with whatever you just typed.
autoload -U history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey $terminfo[kcuu1] history-beginning-search-backward-end
bindkey $terminfo[kcud1] history-beginning-search-forward-end

# reverse intelligent search -- super handy!
bindkey "^R" history-incremental-search-backward

export EDITOR=vim

alias ls='ls -G'
alias l='ls -Fa'
alias ll='ls -la'
alias lll='ls -alotr' # sort by mod time, most recent last
alias llll='ls -aloSrh' # sort by size, largest last
alias cp='cp -v -i'
alias rm='rm -i'
alias mv='mv -v -i'
alias vdiff=opendiff
alias grep='grep --color=auto'
alias ngrok-host='ngrok http -host-header=rewrite'
alias dc='docker-compose'
alias dcr='docker-compose run --rm'
alias gs='git status'
alias gco='git checkout'
alias gcp='git cherry-pick'

# git cherry-pick to master
function gcptm() {
  local branch=$(git branch --show-current)
  local sha=$(git rev-parse --short HEAD)

  [[ -n $(git status --porcelain) ]] && echo "branch is dirty, clean up before cherry picking" && return 1
  [[ $branch == 'master' ]] && echo "you're already on master" && return 1

  echo "cherry-picking $branch onto latest master (leaving behind $sha)"

  local PS4='=> '
  set -x
  git fetch origin master || return $?
  git checkout origin/master || return $?
  git cherry-pick $branch || return $?
  git checkout -B $branch || return $?
}

# purge old docker images (interactively)
function docker-gc() {
  docker images -f "dangling=true"
  read -k 1 "yn?You cool deleting all those? [y/n] "
  echo ""
  case $yn in
    [Nn]* ) return;;
  esac
  docker images -f "dangling=true" -q | while read ID; do docker rmi $ID; done;
}

function mkcd() {
  mkdir -p $1 && cd $1
}

export PATH=~/scripts:$PATH
export PATH=~/java/apache-maven-3.6.3/bin:$PATH
export PATH=~/java/apache-pulsar-2.7.0/bin:$PATH
export PATH=${PATH}:/usr/local/Cellar/pulsarctl/2.7.0.2/share/plugins
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

# Host-specific configs
case $(hostname -s) in
  "c02y1135jgh6")
    ;&
  "mziwisky-l2")
    ;& # this is the syntax for bash case-statement fallthrough
  "mziwisky-l") # formerly "shinestructure"
    if [ -e /usr/local/share/chruby/chruby.sh ]; then
      source /usr/local/share/chruby/chruby.sh
      source /usr/local/share/chruby/auto.sh
    fi
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" --no-use # This loads nvm,
    # but without support for .nvmrc files, i.e. it doesn't automatically call
    # `nvm use` when you `cd`. auto-use may be convenient for heavy node usage,
    # but it makes zsh shells take 1+ seconds to load, which drives me crazy.
    type pyenv > /dev/null && eval "$(pyenv init -)" # this slows shell load a
    # little too, but i'm tolerating it for now
    export PGHOST=localhost
    export PGDATA=/usr/local/var/postgres
    export VAULT_ADDR=https://vault.insops.net
    # NOTE: I don't think the below alias is needed -- if you want to start
    # the postgres server, probably just use `pg_ctl start` instead
    alias pgstart='postgres -D $PGDATA -r $PGDATA/server.log'
    alias mongostart='mongod --config /usr/local/etc/mongod.conf &>/dev/null &'
    alias retina='open ~/scripts/retina.app'
    alias bx='bundle exec'
    alias nx='PATH=$(npm bin):$PATH'
    alias reds='redis-server /usr/local/etc/redis.conf'
    alias pyserv='python -m SimpleHTTPServer'
    alias asc='java -jar /Applications/Adobe\ Flash\ Builder\ 4.7/sdks/4.9.1AIR3.9/lib/asc.jar'
    alias asc2='java -jar /Applications/Adobe\ Flash\ Builder\ 4.7/eclipse/plugins/com.adobe.flash.compiler_4.7.0.349722/AIRSDK.3.9/lib/compiler.jar'
    alias instdokku='ssh dokku@internal.instructure.com'
    alias rr='rapture refresh'
    alias ra='rapture assume'
    alias tf='terraform'
    ;;
  *)
    echo "WARNING: host $(hostname -s) not familiar to .zshrc"
esac

if [ -n "$ZSH_THEME" ]; then
  # oh-my-zsh is probably being used
else
  # probably no oh-my-zsh, so set your PS1
  PS1="%F{green}[%n@%m %F{red}%1~%F{green}]%(#.#.$)%f "
  echo "You should probably get oh-my-zsh, n00b."
fi

# # grr... canvas' `bx rake js:compile` needs to be able to open a zillion files at once
# ulimit -n 4096

# dinghy/docker compels me!
export DOCKER_HOST=tcp://192.168.99.100:2376
export DOCKER_CERT_PATH=/Users/mziwisky/.docker/machine/machines/dinghy
export DOCKER_TLS_VERIFY=1
export DOCKER_MACHINE_NAME=dinghy

export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin

# ftl-engine output is unreadable with solarized, so i made a theme. use it
# when we enter a vaulted shell with SWF_DOMAIN set.
[ -z "$SWF_DOMAIN" ] || echo -e "\033]50;SetProfile=Default but with readable ftl-engine output\a"

# export PATH="/usr/local/opt/scala@2.11/bin:$PATH"
# export JAVA_HOME=$(/usr/libexec/java_home --version 1.8)
# export SBT_OPTS="-Xmx2G -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=2G -Xss2M"

eval "$( command rapture shell-init )"
export CHOPS_REGIONS=us-east-1,us-west-2,eu-west-1,eu-central-1,ca-central-1,ap-southeast-1,ap-southeast-2

# asdf, the swiss army knife of version managers
if [ -e /usr/local/opt/asdf/asdf.sh ]; then
  source /usr/local/opt/asdf/asdf.sh
fi

function k8s-dash() {
  local REG_ENV="${1:-prod-iad}"
  [[ "$VAULTED_ENV" != 'insopshub' ]] && echo "need insopshub vaulted shell" && return 1
  local CONTEXT="$REG_ENV-pulsar-cdc"
  echo "running: kubectl auth-proxy --context $CONTEXT -n kubernetes-dashboard https://kubernetes-dashboard.svc --address localhost:8000"
  kubectl auth-proxy --context "$CONTEXT" -n kubernetes-dashboard https://kubernetes-dashboard.svc --address localhost:8000
}

cdc() {
  local tmpfile=$(mktemp)
  CDC_LOGIN_PASSBACK="$tmpfile" command cdc "$@"
  local exitcode=$?
	if [ -s "$tmpfile" ]; then
    export PULSAR_CLIENT_CONF=$(cat "$tmpfile")
	fi
	rm -f "$tmpfile"
  return $exitcode
}

mb-admin() {
  local REG_ENV="${1:-prod-iad}"
  local PS4='=> '
  set -x
  export PULSAR_CLIENT_CONF=/Users/mziwisky/.config/mb_util/pulsar/$REG_ENV/canvas-cdc.conf
}
